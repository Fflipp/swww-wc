#!/bin/bash

_usageText="Usage: $0 [-h] [-s] [-u] wallpaperName\n"
_helpText="swww-wc wallpaper remover
\t A tool for removing swww-wc wallpapers
Usage: $0 [-h] [-s] [-u] wallpaperName
\t -h Prints this help
\t -s Searches for system-wide wallpapers only
\t -u Searches for user wallpapers only
"

function usage() {
    printf $_usageText
    exit 1
}

function _help() {
    printf $_helpText
    exit 0
}

# Looks for files within a requested folder with filenames that match a given regex
# Ignores file exensions
# ARGS:
#       $1 - Nameref used to return the results array
#       $2 - Folder to be searched
#       $3 - Regex to match filenames against
function getFilesByName() {
    local -n foundFiles=$1
    readarray foundFiles < <(find $2 -mindepth 1 -iregex ".*\/[^.\/]*$3[^\/]*")
}

# Retrieves the $HOME directory of the original user in the event of sudo or su
# Only activtes when the current user is root, since there's NO good reason to
# ever be configuring user-level wallpapers for the system root.
if [ "$EUID" -eq 0 ]; then
    _home=$(getent passwd $(logname) | cut -d: -f6)
else
    _home=~
fi

# Reads in flag arguments and translates them into internal status flags
declare sysOnly=false
declare usrOnly=false
while getopts ":hsu" opt; do
    case "${opt}" in
        h)
            _help
            ;;
        s)
            sysOnly=true
            ;;
        u)
            usrOnly=true
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

# Grabs matching filepaths from requested locations
declare -a sysFilePaths=()
if [[ "$usrOnly" != true ]]; then
    getFilesByName sysFilePaths /usr/share/swww-wc/wallpapers $1
fi

declare -a usrFilePaths=()
if [[ "$sysOnly" != true ]]; then
    getFilesByName usrFilePaths ${_home}/.wallpapers $1
fi

filePaths=( "${sysFilePaths[@]}" "${usrFilePaths[@]}" )
resCount=${#filePaths[@]}

# No results found, program exits
if [ $resCount -le 0 ]; then
	printf "No wallpapers found\n"
	exit 0
# One result found, target set implicitly
elif [ $resCount -eq 1 ]; then
	target=${filePaths[0]}
# Multiple results found, user is queried for selection
else
	printf "Multiple wallpapers found:\n"
	for index in $(seq 0 $((${resCount} - 1))); do
		fileName=$(basename ${filePaths[$index]})
		printf "$((${index} + 1))) ${fileName}\n"
	done
	read -p "Select wallpaper to remove: " target
	if ! [[ $target =~ ^[0-9]+$  ]]; then
		printf "Err: Cannot interpret input as integer\n"
		exit 1
	fi
	target=${filePaths[$(($target - 1))]}
fi

read -p "Delete $(echo ${target} | tr -d "\n") ? [y/N] " confirmation
if [[ $confirmation =~ ^[yY]$ ]]; then
    rm -f $target
fi
